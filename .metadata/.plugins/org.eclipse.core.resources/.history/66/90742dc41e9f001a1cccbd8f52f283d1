package github;

import java.util.Scanner;

public class LinkTest {
	public static void main(String[] args) {
		// 测试代码如下:
		// 先创建一个对象---》表示栈
		ArrayStack stack = new ArrayStack(4);
		String key = ""; // 空串
		boolean loop = true; // 控制是否退出菜单
		Scanner scanner = new Scanner(System.in);

		while (loop) {
			System.out.println("show:表示显示栈");
			System.out.println("exit:退出程序");
			System.out.println("push:表示添加数据到栈(入栈)");
			System.out.println("pop:表示从栈取出数据(出栈)");
			System.out.println("请输入你的选择:");
			key = scanner.next();
			switch (key) {
			case "show":
				stack.list();
				break;
			case "push":
				System.out.println("请输入一个数:");
				int value = scanner.nextInt();
				stack.push(value);
				break;
			case "pop":
				try {
					int res = stack.pop();
					System.out.printf("取出的数据是%d\n", res);
				} catch (Exception e) {
					System.out.println(e.getMessage());
				}
				break;
			case "exit":
				scanner.close();
				loop = false;
				break;
			default:
				break;
			}
		}
		System.out.println("程序退出！！！！");
	}
}

// 链表操作
class LinkedListStack {
	private LinkedList head = new LinkedList(-1);

	// 判断栈空
	public boolean isEmpty() {
		return head.next == null;
	}

	public void push(int num) {
		if (isEmpty()) {
			head.next = new LinkedList(num);
		} else {
			LinkedList newNum = new LinkedList(num);
			newNum.next = head.next;
			head.next = newNum;
		}
	}

	public int pop() {
		if (isEmpty()) {
			new RuntimeException("栈空");
		}

		int num = head.next.val;
		head.next = head.next.next;
		return num;
	}

	// 遍历stack
	public void list() {
		if (isEmpty()) {
			System.out.println("栈空的！");
		} else {
			LinkedList cur = head.next;
			System.out.println("栈顶到栈底：");
			while (cur != null) {
				System.out.println(cur.val);
				cur = cur.next;
			}
		}
	}
}

// 节点
class LinkedList {
	public int val;
	public LinkedList next;

	public LinkedList(int val) {
		this.val = val;
	}
}