package github;

import github2.ArrayStack;

public class Calculator {

	public static void main(String[] args) {
		// 测试一下
		String expression = "3+2*6-2";
		// 创建两个栈,一个数栈,一个符号栈
		ArrayStack numStack = new ArrayStack(10);
		ArrayStack operStack = new ArrayStack(10);
		// 定义两个相关变量
		int index = 0; // 用于扫描
		int num1 = 0;
		int num2 = 0;
		int oper = 0;
		int res = 0;
		char ch = ' '; // 每次的扫描结果保存到ch
		// k=开始用while语句循环扫描exception
		while (true) {
			// ���εõ�expression ��ÿһ���ַ�
			ch = expression.substring(index, index + 1).charAt(0);
			// �ж�ch��ʲô��Ȼ������Ӧ�Ĵ���
			if (operStack.isOper(ch)) {// ����������
				// �жϵ�ǰ�ķ���ջ�Ƿ�Ϊ��
				if (!operStack.isEmpty()) {
					// �������ջ�в��������ͽ��бȽ�,�����ǰ�Ĳ����������ȼ�С�ڻ��ߵ���ջ�еĲ�����,����Ҫ����ջ��pop��������,
					// �ڴӷ���ջ��pop��һ�����ţ��������㣬���õ����������ջ��Ȼ�󽫵�ǰ�Ĳ����������ջ
					if (operStack.priority(ch) <= operStack.priority(operStack.peek())) {
						num1 = numStack.pop();
						num2 = numStack.pop();
						oper = operStack.pop();
						res = numStack.cal(num1, num2, oper);
						// ������Ľ������ջ
						numStack.push(res);
						// Ȼ�󽫵�ǰ�Ĳ����������ջ
						operStack.push(ch);
					} else {
						// �����ǰ�Ĳ����������ȼ�����ջ�еĲ������� ��ֱ�������ջ.
						operStack.push(ch);
					}
				} else {
					// ���Ϊ��ֱ�������ջ..
					operStack.push(ch); // 1 + 3
				}
			} else { // �����������ֱ������ջ

				// numStack.push(ch - 48); //? "1+3" '1' => 1
				// ����˼·
				// 1. �������λ��ʱ�����ܷ�����һ������������ջ����Ϊ�������Ƕ�λ��
				// 2. �ڴ���������Ҫ��expression�ı��ʽ��index
				// ���ٿ�һλ,��������ͽ���ɨ�裬����Ƿ��Ų���ջ
				// 3. ���������Ҫ����һ������ �ַ���������ƴ��

				// �����λ��
				keepNum += ch;

				// ���ch�Ѿ���expression�����һλ����ֱ����ջ
				if (index == expression.length() - 1) {
					numStack.push(Integer.parseInt(keepNum));
				} else {

					// �ж���һ���ַ��ǲ������֣���������֣��ͼ���ɨ�裬����������������ջ
					// ע���ǿ���һλ������index++
					if (operStack.isOper(expression.substring(index + 1, index + 2).charAt(0))) {
						// �����һλ�������������ջ keepNum = "1" ���� "123"
						numStack.push(Integer.parseInt(keepNum));
						// ��Ҫ��!!!!!!, keepNum���
						keepNum = "";

					}
				}
			}
			// ��index + 1, ���ж��Ƿ�ɨ�赽expression���.
			index++;
			if (index >= expression.length()) {
				break;
			}
		}

		// �����ʽɨ����ϣ���˳��Ĵ� ��ջ�ͷ���ջ��pop����Ӧ�����ͷ��ţ�������.
		while (true) {
			// �������ջΪ�գ�����㵽���Ľ��, ��ջ��ֻ��һ�����֡������
			if (operStack.isEmpty()) {
				break;
			}
			num1 = numStack.pop();
			num2 = numStack.pop();
			oper = operStack.pop();
			res = numStack.cal(num1, num2, oper);
			numStack.push(res);// ��ջ
		}
		// ����ջ���������pop�������ǽ��
		int res2 = numStack.pop();
		System.out.printf("���ʽ %s = %d", expression, res2);
	}

}

//先创建一个栈,直接使用前面的
//定义一个类,表示栈
class ArrayStack2 {
	private int maxSize; // 栈的大小
	private int[] stack; // 数组,模拟栈,数据就放在该数组
	private int top = -1; // top表示栈,初始化为-1

	// 构造器
	public ArrayStack2(int maxSize) {
		this.maxSize = maxSize;
		stack = new int[this.maxSize];
	}
	
	//自定义一个方法,可以返回当前栈顶的值 ,但不是真的出栈
	public int peek(){
		return stack[top];
	}

	// 栈满
	public boolean isFull() {
		return top == maxSize - 1;
	}

	// 栈空
	public boolean isEmpty() {
		return top == -1;
	}

	// 入栈
	public void push(int value) {
		// 先判断栈是否满
		if (isFull()) {
			System.out.println("栈满了！！！");
			return;
		}
		top++;
		stack[top] = value;
	}

	// 出栈-pop,将栈顶的数据返回
	public int pop() {
		// 先判断栈是否空
		if (isEmpty()) {
			// 抛出异常
			throw new RuntimeException("栈空,没有数据！！！");
		}
		int value = stack[top];
		top--;
		return value;
	}

	// 显示栈的情况[便利栈],遍历时,需要从栈顶开始显示数据
	public void list() {
		if (isEmpty()) {
			System.out.println("栈空,没有数据！！！");
			return;
		}
		for (int i = top; i >= 0; i--) {
			System.out.printf("stack[%d]=%d\n", i, stack[i]);
		}
	}
	//返回运算符的优先级,优先级是程序员来确定,优先级使用数字表示
	//数字越大,则优先级就越高
	public int priority(int oper){
		if(oper == '*' || oper == '/'){
			return 1;
		}else if(oper == '+' || oper == '-'){
			return 0;
		}else{
			return -1;	//假设目前表达式只有+ - * /
		}
	}
	//判断是不是一个运算符
	public boolean isOper(char val){
		return val == '+' || val == '-' || val == '*' || val == '/';
	}
	//计算方法
	public int cal(int num,int num2,int oper){
		int res = 0;	//用于存放反计算的结果
		switch(oper){
		case '+':
			res = num + num2;
			break;
		case '-':
			res = num2 - num;	//注意顺序
			break;
		case '*':
			res = num * num2;
			break;
		case '/':
			res = num2 / num;
			break;	
		default:
			break;
		}
		return res;
	}
}