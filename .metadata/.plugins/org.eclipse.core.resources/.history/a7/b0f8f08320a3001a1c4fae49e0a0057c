package github;

import java.util.ArrayList;

//注意:使用二分查找的数组,必须是有序的。
public class BinarySearch2 {

	public static void main(String[] args) {
		int arr[] = {1,8, 10, 89, 1000, 1234};
		int serch = binarySerch2(arr, 0, arr.length - 1, 11);
		System.out.println("serch = " + serch);
	}
	
	//{1,8, 10, 89, 1000, 1000，1234} 
	//当一个有序数组中，有多个相同的数值时，如何将所有的数值都查找到，比如这里的 1000.
	//思路分析:
	//1.在找到mid时,不马上返回
	//2.向mid索引值的左边扫描,将所有满足 1000的元素的下标，加入到集合ArrayList中
	//3.向mid索引值的右边扫描,将所有满足 1000的元素的下标，加入到集合ArrayList中
	//4.返回ArrayList集合
	public static ArrayList binarySerch2(int arr[],int left,int right,int findVal){
		//当left > right时,整个数组都没有
		if(left > right){	//没有这个判断,会造成死递归！！！！
			return -1;
		}
		int mid = (left + right) / 2;
		int midVal = arr[mid];
		if(findVal > midVal){	//向右递归
			return binarySerch2(arr, mid + 1, right, findVal);
		}else if(findVal < midVal){	//向左递归
			return binarySerch2(arr, left, mid-1, findVal);
		}else{
			return mid;
		}
	}
}
