package github3;

public class HashTable {
	public static void main(String[] args) {
		
	}
}
//表示一个雇员
class Emp{
	public int id;
	public String name;
	public Emp next; // next默认为 null
	public Emp(int id, String name) {
		super();
		this.id = id;
		this.name = name;
	}
}

//创建一个EmpLink,表示链表
class EmpLink{
	//头指针,指向第一个Emp,因此这个链表的head是有效的,直接指向第一个Emp
	private Emp head;	//默认为null
	//添加雇员到链表
	//说明
	//1.假设,当添加雇员时,id是自增长,即id的分配总是从小到大
	//  因此可以将该雇员直接加入到本链表的最后即可
	public void add(Emp emp){
		//如果是添加第一个雇员
		if(head == null){
			head = emp;
			return;
		}
		//如果不是第一个,则使用一个辅助指针,帮助定位
		Emp curEmp = head;
		while(true){
			if(curEmp.next == null){	//到达链表的最后
				break;
			}
			curEmp = curEmp.next;	//后移
		}
		//退出时直接将emp,加入链表
		curEmp.next = emp;
	}
	//遍历链表
	public void list(){
		if(head == null){	//链表为空
			System.out.println("当前链表为空");
			return;
		}
		System.out.println("当前链表的信息:");
		Emp curEmp = head;	//辅助指针
		while(true){
			System.out.printf("=> id = %d name = %s\t",curEmp.id,curEmp.name);
			if(curEmp.next == null){	//说明curEmp已经是最后的节点
				break;
			}
			curEmp = curEmp.next;	//后移
		}
		System.out.println();
	}
}